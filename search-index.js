var searchIndex = new Map(JSON.parse('[\
["lta",{"doc":"lta-rs","t":"PFKFPPFPFRPPEGIPPRPFFFPPPCMCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEMNNNNNNNCMECCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNECMKEMMCCCCCCCCCKMNNNFONONNNNONNNNNNNNNNNNKMMMKMKMEEEEEEEKNNKMNNNNNNNNNNKNKEMMCCCCCCCCCKMNNNFONNONNNNNNONNNNNNNNNNNNNNNKMMMKMKMEEEEEEEKNNKMNNNNNNNNNNKNEEEEEEEFNNNCNNCNNCNNNCNNCNNNNNNNNNNCNCCNNNFFFNNNNNNNNNNNCNCNNNNCNNNNNNNCNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNCNNNNCCNNNNNNNNNNNNNFNNCCNNCNCNNCNNNNNNNNNCNCCNNN","n":["BackendError","Bus","Client","Crowd","Custom","Err","Facility","FailedToParseBody","Geo","InternalClient","InternalServerError","InvalidAPIKey","LTAClient","LTAError","LTAResult","NotFound","Ok","RB","RateLimitReached","Taxi","Traffic","Train","Unauthorized","UnhandledStatusCode","UnknownEnumVariant","async","base_url","blocking","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","compare","compare","compare","compare","compare","compare","compare","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_arrival","get_arrival","get_arrival","get_bike_parking","get_bike_parking","get_bike_parking","get_crowd_density_forecast","get_crowd_density_forecast","get_crowd_density_forecast","get_crowd_density_rt","get_crowd_density_rt","get_crowd_density_rt","get_facilities_maintenance","get_facilities_maintenance","get_facilities_maintenance","get_geospatial_whole_island","get_geospatial_whole_island","get_geospatial_whole_island","get_passenger_vol_by","get_passenger_vol_by","get_passenger_vol_by","into","into","into","into","into","into","into","into","models","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","prelude","req_builder","reqwest","reqwest_async","reqwest_blocking","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ureq","ureq_blocking","with_api_key","ClientExt","LTAClient","build_req_with_query","build_req_with_skip","bus","client","crowd","facility","geo","prelude","taxi","traffic","train","BusRequests","get_arrival","get_bus_routes","get_bus_services","get_bus_stops","LTAClient","api_key","base_url","base_url","borrow","borrow_mut","build_req_with_query","build_req_with_skip","client","clone","clone_into","fmt","from","into","new","req_builder","to_owned","try_from","try_into","type_id","with_api_key","CrowdRequests","get_crowd_density_forecast","get_crowd_density_rt","get_passenger_vol_by","FacilityRequests","get_facilities_maintenance","GeoRequests","get_geospatial_whole_island","BusRequests","CrowdRequests","FacilityRequests","GeoRequests","TaxiRequests","TrafficRequests","TrainRequests","TaxiRequests","get_taxi_avail","get_taxi_stands","TrafficRequests","get_bike_parking","get_carpark_avail","get_erp_rates","get_est_travel_time","get_faulty_traffic_lights","get_road_details","get_traffic_flow","get_traffic_images","get_traffic_incidents","get_traffic_speed_band","get_vms_emas","TrainRequests","get_train_service_alert","ClientExt","LTAClient","build_req_with_query","build_req_with_skip","bus","client","crowd","facility","geo","prelude","taxi","traffic","train","BusRequests","get_arrival","get_bus_routes","get_bus_services","get_bus_stops","LTAClient","api_key","base_url","base_url","base_url","borrow","borrow_mut","build_req_with_query","build_req_with_query","build_req_with_skip","build_req_with_skip","client","clone","clone_into","fmt","from","into","new","new","req_builder","req_builder","to_owned","try_from","try_into","type_id","with_api_key","with_api_key","CrowdRequests","get_crowd_density_forecast","get_crowd_density_rt","get_passenger_vol_by","FacilityRequests","get_facilities_maintenance","GeoRequests","get_geospatial_whole_island","BusRequests","CrowdRequests","FacilityRequests","GeoRequests","TaxiRequests","TrafficRequests","TrainRequests","TaxiRequests","get_taxi_avail","get_taxi_stands","TrafficRequests","get_bike_parking","get_carpark_avail","get_erp_rates","get_est_travel_time","get_faulty_traffic_lights","get_road_details","get_traffic_flow","get_traffic_images","get_traffic_incidents","get_traffic_speed_band","get_vms_emas","TrainRequests","get_train_service_alert","Bus","Crowd","Facility","Geo","Taxi","Traffic","Train","ReqwestAsync","borrow","borrow_mut","builder","bus","call","call","client","clone","clone_into","crowd","default","delete","execute","facility","fmt","from","geo","get","head","into","new","patch","poll_ready","poll_ready","post","put","request","taxi","to_owned","traffic","train","try_from","try_into","type_id","RequestBuilder","ReqwestBlocking","Response","basic_auth","bearer_auth","body","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","bus","bytes","client","clone","clone_into","content_length","copy_to","crowd","default","delete","error_for_status","error_for_status_ref","execute","extensions","extensions_mut","facility","fmt","fmt","fmt","form","from","from","from","from","geo","get","head","header","headers","headers","headers_mut","into","into","into","json","json","new","patch","post","put","query","read","remote_addr","request","send","status","taxi","text","text_with_charset","timeout","to_owned","traffic","train","try_clone","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","url","version","version","Agent","borrow","borrow_mut","bus","client","clone","clone_into","crowd","delete","facility","fmt","from","geo","get","head","into","new","patch","post","put","request","request_url","taxi","to_owned","traffic","train","try_from","try_into","type_id"],"q":[[0,"lta"],[195,"lta::async"],[208,"lta::async::bus"],[213,"lta::async::client"],[234,"lta::async::crowd"],[238,"lta::async::facility"],[240,"lta::async::geo"],[242,"lta::async::prelude"],[249,"lta::async::taxi"],[252,"lta::async::traffic"],[264,"lta::async::train"],[266,"lta::blocking"],[279,"lta::blocking::bus"],[284,"lta::blocking::client"],[311,"lta::blocking::crowd"],[315,"lta::blocking::facility"],[317,"lta::blocking::geo"],[319,"lta::blocking::prelude"],[326,"lta::blocking::taxi"],[329,"lta::blocking::traffic"],[341,"lta::blocking::train"],[343,"lta::prelude"],[350,"lta::reqwest_async"],[385,"lta::reqwest_blocking"],[465,"lta::ureq_blocking"],[494,"core::cmp"],[495,"core::fmt"],[496,"core::fmt"],[497,"core::option"],[498,"core::convert"],[499,"lta_models::traffic::bike_parking"],[500,"alloc::vec"],[501,"lta_models::train::train_service_alert"],[502,"lta_models::crowd::crowd_density"],[503,"lta_models::crowd::crowd_density"],[504,"alloc::string"],[505,"lta_models::geo::geospatial_whole_island"],[506,"lta_models::crowd::passenger_vol"],[507,"time::date"],[508,"core::result"],[509,"core::any"],[510,"core::ops::function"],[511,"lta_models::bus::bus_routes"],[512,"lta_models::bus::bus_services"],[513,"lta_models::bus::bus_stops"],[514,"core::clone"],[515,"core::fmt"],[516,"lta_models::taxi::taxi_stands"],[517,"lta_models::traffic::carpark_avail"],[518,"lta_models::traffic::erp_rates"],[519,"lta_models::traffic::est_travel_time"],[520,"lta_models::traffic::faulty_traffic_lights"],[521,"lta_models::traffic::road"],[522,"lta_models::traffic::road"],[523,"lta_models::traffic::traffic_incidents"],[524,"core::marker"],[525,"lta_models::traffic::traffic_speed_bands"],[526,"lta_models::traffic::vms_emas"],[527,"lta_models::train::train_service_alert"],[528,"reqwest::async_impl::request"],[529,"reqwest::async_impl::request"],[530,"reqwest::async_impl::response"],[531,"reqwest::error"],[532,"core::future::future"],[533,"core::fmt"],[534,"core::task::poll"],[535,"http::method"],[536,"core::fmt"],[537,"reqwest::blocking::request"],[538,"reqwest::blocking::client"],[539,"bytes::bytes"],[540,"std::io"],[541,"core::marker"],[542,"serde::ser"],[543,"http::response"],[544,"reqwest::async_impl::body"],[545,"http::header::map"],[546,"serde::de"],[547,"std::io::error"],[548,"core::net::socket_addr"],[549,"http::status"],[550,"core::time"],[551,"url"],[552,"http::version"],[553,"ureq::request"]],"d":["Internal error within the client backend, open a PR if …","Bus type that implements APIs. Can be either blocking or …","A <code>Client</code> to make requests with The <code>Client</code> holds a …","Crowd type that implements APIs. Can be either blocking or …","Custom","Contains the error value","Facility type that implements APIs. Can be either blocking …","Failed to parse body of response, probably malformed","Geo type that implements APIs. Can be either blocking or …","Any backend Client","","API key is most likely empty","","LTAError type, all request using lta-rs returns …","Type alias for <code>Result&lt;T, LTAError&gt;</code>","HTTP NOTFOUND","Contains the success value","Any type that can build requests","You have reached the server limit, try again later","Taxi type that implements APIs. Can be either blocking or …","Traffic type that implements APIs. Can be either blocking …","Train type that implements APIs. Can be either blocking or …","Make sure that your API key is correct and valid","Undocumented status code, open an issue if this happens","Response body can’t be parsed to a valid enum","Internal Async module","Returns the base URL that is set by user","Internal module containing traits for blocking impl","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","General constructor for <code>Self</code>","","","","","","","","Imports for important structs","Returns <code>Self::RB</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This method not assign the <code>api_key</code> in struct if the …","","","","","","Client for interacting with LTA API","","","","","","","","All API pertaining to buses","Returns real-time Bus Arrival information of Bus Services …","Returns detailed route information for all services …","Returns detailed service information for all buses …","Returns detailed information for all bus stops currently …","A <code>Client</code> to make requests with The <code>Client</code> holds a …","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","All APIs pertaining to transportation crowd","Returns forecasted platform crowdedness level for the …","Returns real-time platform crowdedness level for the …","<strong>Update freq</strong>: By 15th of every month, the passenger volume …","","Returns pre-signed links to JSON file containing …","","Returns the SHP files of the requested geospatial layer","","","","","","","","All APIs pertaining to taxis","Returns location coordinates of all Taxis that are …","Returns detailed information of Taxi stands, such as …","","Returns bicycle parking locations within a radius","Returns no. of available lots for HDB, LTA and URA carpark …","Returns ERP rates of all vehicle types across all timings …","Returns estimated travel times of expressways (in …","Returns alerts of traffic lights that are currently …","Returns all planned road openings or road works depending …","Returns hourly average traffic flow, taken from a …","Returns links to images of live traffic conditions along …","Returns current traffic speeds on expressways and arterial …","Returns current traffic speeds on expressways and arterial …","Returns traffic advisories (via variable message services) …","","Returns detailed information on train service …","","","","","","Client for interacting with LTA API","","","","","","","","All API pertaining to buses","Returns real-time Bus Arrival information of Bus Services …","Returns detailed route information for all services …","Returns detailed service information for all buses …","Returns detailed information for all bus stops currently …","A <code>Client</code> to make requests with The <code>Client</code> holds a …","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","All APIs pertaining to transportation crowd","Returns forecasted platform crowdedness level for the …","Returns real-time platform crowdedness level for the …","Creates a new client for every call <strong>Update freq</strong>: By 15th …","","Returns pre-signed links to JSON file containing …","","Returns the SHP files of the requested geospatial layer","","","","","","","","All APIs pertaining to taxis","Returns location coordinates of all Taxis that are …","Returns detailed information of Taxi stands, such as …","","Returns bicycle parking locations within a radius","Returns no. of available lots for HDB, LTA and URA carpark …","Returns ERP rates of all vehicle types across all timings …","Returns estimated travel times of expressways (in …","Returns alerts of traffic lights that are currently …","Returns all planned road openings or road works depending …","Returns hourly average traffic flow, taken from a …","Returns links to images of live traffic conditions along …","Returns current traffic speeds on expressways and arterial …","Returns current traffic speeds on expressways and arterial …","Returns traffic advisories (via variable message services) …","","Returns detailed information on train service …","","","","","","","","An asynchronous <code>Client</code> to make Requests with.","","","Creates a <code>ClientBuilder</code> to configure a <code>Client</code>.","","","","","","","","","Convenience method to make a <code>DELETE</code> request to a URL.","Executes a <code>Request</code>.","","","Returns the argument unchanged.","","Convenience method to make a <code>GET</code> request to a URL.","Convenience method to make a <code>HEAD</code> request to a URL.","Calls <code>U::from(self)</code>.","Constructs a new <code>Client</code>.","Convenience method to make a <code>PATCH</code> request to a URL.","","","Convenience method to make a <code>POST</code> request to a URL.","Convenience method to make a <code>PUT</code> request to a URL.","Start building a <code>Request</code> with the <code>Method</code> and <code>Url</code>.","","","","","","","","A builder to construct the properties of a <code>Request</code>.","A <code>Client</code> to make Requests with.","A Response to a submitted <code>Request</code>.","Enable HTTP basic authentication.","Enable HTTP bearer authentication.","Set the request body.","","","","","","","Build a <code>Request</code>, which can be inspected, modified and …","Creates a <code>ClientBuilder</code> to configure a <code>Client</code>.","","Get the full response body as <code>Bytes</code>.","","","","Get the content-length of the response, if it is known.","Copy the response body into a writer.","","","Convenience method to make a <code>DELETE</code> request to a URL.","Turn a response into an error if the server returned an …","Turn a reference to a response into an error if the server …","Executes a <code>Request</code>.","Returns a reference to the associated extensions.","Returns a mutable reference to the associated extensions.","","","","","Send a form body.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Convenience method to make a <code>GET</code> request to a URL.","Convenience method to make a <code>HEAD</code> request to a URL.","Add a <code>Header</code> to this Request.","Get the <code>Headers</code> of this <code>Response</code>.","Add a set of Headers to the existing ones on this Request.","Get a mutable reference to the <code>Headers</code> of this <code>Response</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Try and deserialize the response body as JSON using <code>serde</code>.","Send a JSON body.","Constructs a new <code>Client</code>.","Convenience method to make a <code>PATCH</code> request to a URL.","Convenience method to make a <code>POST</code> request to a URL.","Convenience method to make a <code>PUT</code> request to a URL.","Modify the query string of the URL.","","Get the remote address used to get this <code>Response</code>.","Start building a <code>Request</code> with the <code>Method</code> and <code>Url</code>.","Constructs the Request and sends it the target URL, …","Get the <code>StatusCode</code> of this <code>Response</code>.","","Get the response text.","Get the response text given a specific encoding.","Enables a request timeout.","","","","Attempts to clone the <code>RequestBuilder</code>.","","","","","","","","","","Get the final <code>Url</code> of this <code>Response</code>.","Get the HTTP <code>Version</code> of this <code>Response</code>.","Set HTTP version","Agents keep state between requests.","","","","","","","","Make a DELETE request from this agent.","","","Returns the argument unchanged.","","Make a GET request from this agent.","Make a HEAD request from this agent.","Calls <code>U::from(self)</code>.","Creates an Agent with default settings.","Make a PATCH request from this agent.","Make a POST request from this agent.","Make a PUT request from this agent.","Make a request with the HTTP verb as a parameter.","Make a request using an already-parsed Url.","","","","","","",""],"i":[15,0,0,0,15,22,0,15,0,3,15,15,0,0,0,15,22,3,15,0,0,0,15,15,15,0,3,0,15,5,6,7,8,9,10,11,15,5,6,7,8,9,10,11,5,6,7,8,9,10,11,5,6,7,8,9,10,11,5,6,7,8,9,10,11,5,6,7,8,9,10,11,5,6,7,8,9,10,11,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,15,15,5,6,7,8,9,10,11,15,5,6,7,8,9,10,11,5,5,5,8,8,8,6,6,6,6,6,6,11,11,11,10,10,10,6,6,6,15,5,6,7,8,9,10,11,0,3,5,6,7,8,9,10,11,0,3,0,0,0,5,6,7,8,9,10,11,15,15,5,6,7,8,9,10,11,15,5,6,7,8,9,10,11,15,5,6,7,8,9,10,11,0,0,3,0,0,41,41,0,0,0,0,0,0,0,0,0,0,101,101,101,101,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,102,102,102,0,103,0,104,0,0,0,0,0,0,0,0,105,105,0,106,106,106,106,106,106,106,106,106,106,106,0,107,0,0,63,63,0,0,0,0,0,0,0,0,0,0,108,108,108,108,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,109,109,109,0,110,0,111,0,0,0,0,0,0,0,0,112,112,0,113,113,113,113,113,113,113,113,113,113,113,0,114,0,0,0,0,0,0,0,0,25,25,25,0,25,25,0,25,25,0,25,25,25,0,25,25,0,25,25,25,25,25,25,25,25,25,25,0,25,0,0,25,25,25,0,0,0,75,75,75,80,18,75,80,18,75,75,18,0,80,0,18,18,80,80,0,18,18,80,80,18,80,80,0,80,18,75,75,80,80,18,75,0,18,18,75,80,75,80,80,18,75,80,75,18,18,18,18,75,80,80,18,75,80,0,80,80,75,18,0,0,75,80,18,75,80,18,75,80,18,75,80,80,75,0,27,27,0,0,27,27,0,27,0,27,27,0,27,27,27,27,27,27,27,27,27,0,27,0,0,27,27,27],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[],[[1,[-1]],[2,[-2]]]]],4,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[-1,-2],12,[],[]],[[5,5],13],[[6,6],13],[[7,7],13],[[8,8],13],[[9,9],13],[[10,10],13],[[11,11],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[5,5],14],[[6,6],14],[[7,7],14],[[8,8],14],[[9,9],14],[[10,10],14],[[11,11],14],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[15,16],17],[[15,16],17],[[5,16],17],[[6,16],17],[[7,16],17],[[8,16],17],[[9,16],17],[[10,16],17],[[11,16],17],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[19,[18]],20,-1],[[22,[21]]],[[24,[[23,[4]]]]]],[[[26,[25]],20,-1],[[22,[21]]],[[24,[[23,[4]]]]]],[[[19,[27]],20,-1],[[22,[21]]],[[24,[[23,[4]]]]]],[[[26,[25]],28,28,-1],[[22,[[30,[29]]]]],[[24,[[23,[28]]]]]],[[[19,[18]],28,28,-1],[[22,[[30,[29]]]]],[[24,[[23,[28]]]]]],[[[19,[27]],28,28,-1],[[22,[[30,[29]]]]],[[24,[[23,[28]]]]]],[[[19,[27]],31],[[22,[32]]]],[[[26,[25]],31],[[22,[32]]]],[[[19,[18]],31],[[22,[32]]]],[[[19,[27]],31],[[22,[[30,[33]]]]]],[[[19,[18]],31],[[22,[[30,[33]]]]]],[[[26,[25]],31],[[22,[[30,[33]]]]]],[[[19,[27]],34],[[22,[[30,[35]]]]]],[[[19,[18]],34],[[22,[[30,[35]]]]]],[[[26,[25]],34],[[22,[[30,[35]]]]]],[[[26,[25]],36],[[22,[[30,[35]]]]]],[[[19,[27]],36],[[22,[[30,[35]]]]]],[[[19,[18]],36],[[22,[[30,[35]]]]]],[[[26,[25]],37,-1,-2],[[22,[[30,[35]]]]],[[24,[[23,[38]]]]],[[24,[[23,[20]]]]]],[[[19,[18]],37,-1,-2],[[22,[[30,[35]]]]],[[24,[[23,[38]]]]],[[24,[[23,[20]]]]]],[[[19,[27]],37,-1,-2],[[22,[[30,[35]]]]],[[24,[[23,[38]]]]],[[24,[[23,[20]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[-1,-2,-3],[[3,[],[[1,[-2]],[2,[-4]]]]],[[24,[35]]],[],[[24,[35]]],[]],[[5,5],[[23,[13]]]],[[6,6],[[23,[13]]]],[[7,7],[[23,[13]]]],[[8,8],[[23,[13]]]],[[9,9],[[23,[13]]]],[[10,10],[[23,[13]]]],[[11,11],[[23,[13]]]],0,[[[3,[],[[1,[-1]],[2,[-2]]]],4],-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,35,[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],0,0,[[-1,-2],[[22,[[3,[],[[1,[-3]],[2,[-4]]]]]]],[[24,[35]]],[[24,[35]]],[],[]],0,0,[[41,4,-2],[[22,[-3]]],[],[[43,[-1],[[42,[-1]]]]],[]],[[41,4,[23,[20]]],[[22,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,[[-1,20,-2],[[22,[21]]],[3,41],[[24,[[23,[4]]]]]],[[-1,-2],[[22,[[30,[44]]]]],[3,41],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[45]]]]],[3,41],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[46]]]]],[3,41],[[24,[[23,[20]]]]]],0,0,[[[26,[25]]],4],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[25]],4,-2],[[22,[-3]]],[],[[43,[-1],[[42,[-1]]]]],[]],[[[26,[25]],4,[23,[20]]],[[22,[-1]]],[]],0,[[[26,[-1]]],[[26,[-1]]],47],[[-1,-2],12,[],[]],[[[26,[-1]],16],17,48],[-1,-1,[]],[-1,-2,[],[]],[[-1,-2,-3],[[26,[25]]],[[24,[35]]],[],[[24,[35]]]],[[[26,[25]],4],-1,[]],[-1,-2,[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,40,[]],[[-1,-2],[[22,[[26,[25]]]]],[[24,[35]]],[[24,[35]]]],0,[[-1,31],[[22,[32]]],[3,41]],[[-1,31],[[22,[[30,[33]]]]],[3,41]],[[-1,37,-2,-3],[[22,[[30,[35]]]]],[3,41],[[24,[[23,[38]]]]],[[24,[[23,[20]]]]]],0,[[-1,34],[[22,[[30,[35]]]]],[3,41]],0,[[-1,36],[[22,[[30,[35]]]]],[3,41]],0,0,0,0,0,0,0,0,[[-1,-2],[[22,[[30,[49]]]]],[3,41],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[50]]]]],[3,41],[[24,[[23,[20]]]]]],0,[[-1,28,28,-2],[[22,[[30,[29]]]]],[3,41],[[24,[[23,[28]]]]]],[[-1,-2],[[22,[[30,[51]]]]],[3,41],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[52]]]]],[3,41],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[53]]]]],[3,41],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[54]]]]],[3,41],[[24,[[23,[20]]]]]],[[-1,55,-2],[[22,[[30,[56]]]]],[3,41],[[24,[[23,[20]]]]]],[-1,[[22,[[30,[35]]]]],[3,41]],[[-1,-2],[[22,[[30,[57]]]]],[3,41],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[58]]]]],[3,41],[[24,[[23,[20]]]],59]],[[-1,-2],[[22,[[30,[60]]]]],[3,41],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[61]]]]],[3,41],[[24,[[23,[20]]]]]],0,[[-1,-2],[[22,[62]]],[3,41],[[24,[[23,[20]]]]]],0,0,[[63,4,-2],[[22,[-3]]],[],[[43,[-1],[[42,[-1]]]]],[]],[[63,4,[23,[20]]],[[22,[-1]]],[]],0,0,0,0,0,0,0,0,0,0,[[-1,20,-2],[[22,[21]]],[3,63],[[24,[[23,[4]]]]]],[[-1,-2],[[22,[[30,[44]]]]],[3,63],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[45]]]]],[3,63],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[46]]]]],[3,63],[[24,[[23,[20]]]]]],0,0,[[[19,[18]]],4],[[[19,[27]]],4],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[19,[27]],4,-2],[[22,[-3]]],[],[[43,[-1],[[42,[-1]]]]],[]],[[[19,[18]],4,-2],[[22,[-3]]],[],[[43,[-1],[[42,[-1]]]]],[]],[[[19,[27]],4,[23,[20]]],[[22,[-1]]],[]],[[[19,[18]],4,[23,[20]]],[[22,[-1]]],[]],0,[[[19,[-1]]],[[19,[-1]]],47],[[-1,-2],12,[],[]],[[[19,[-1]],16],17,48],[-1,-1,[]],[-1,-2,[],[]],[[-1,-2,-3],[[19,[18]]],[[24,[35]]],[],[[24,[35]]]],[[-1,-2,-3],[[19,[27]]],[[24,[35]]],[],[[24,[35]]]],[[[19,[27]],4],-1,[]],[[[19,[18]],4],-1,[]],[-1,-2,[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,40,[]],[[-1,-2],[[22,[[19,[27]]]]],[[24,[35]]],[[24,[35]]]],[[-1,-2],[[22,[[19,[18]]]]],[[24,[35]]],[[24,[35]]]],0,[[-1,31],[[22,[32]]],[3,63]],[[-1,31],[[22,[[30,[33]]]]],[3,63]],[[-1,37,-2,-3],[[22,[[30,[35]]]]],[3,63],[[24,[[23,[38]]]]],[[24,[[23,[20]]]]]],0,[[-1,34],[[22,[[30,[35]]]]],[3,63]],0,[[-1,36],[[22,[[30,[35]]]]],[3,63]],0,0,0,0,0,0,0,0,[[-1,-2],[[22,[[30,[49]]]]],[3,63],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[50]]]]],[3,63],[[24,[[23,[20]]]]]],0,[[-1,28,28,-2],[[22,[[30,[29]]]]],[3,63],[[24,[[23,[28]]]]]],[[-1,-2],[[22,[[30,[51]]]]],[3,63],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[52]]]]],[3,63],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[53]]]]],[3,63],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[54]]]]],[3,63],[[24,[[23,[20]]]]]],[[-1,55,-2],[[22,[[30,[56]]]]],[3,63],[[24,[[23,[20]]]]]],[-1,[[22,[[30,[35]]]]],[3,63]],[[-1,-2],[[22,[[30,[57]]]]],[3,63],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[58]]]]],[3,63],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[60]]]]],[3,63],[[24,[[23,[20]]]]]],[[-1,-2],[[22,[[30,[61]]]]],[3,63],[[24,[[23,[20]]]]]],0,[[-1,-2],[[22,[62]]],[3,63],[[24,[[23,[20]]]]]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],64],0,[[25,65]],[[25,65]],0,[25,25],[[-1,-2],12,[],[]],0,[[],25],[[25,-1],66,67],[[25,65],[[0,[[70,[],[[42,[[39,[68,69]]]]]]]]]],0,[[25,16],[[39,[12,71]]]],[-1,-1,[]],0,[[25,-1],66,67],[[25,-1],66,67],[-1,-2,[],[]],[[],25],[[25,-1],66,67],[[25,72],[[73,[[39,[12]]]]]],[[25,72],[[73,[[39,[12]]]]]],[[25,-1],66,67],[[25,-1],66,67],[[25,74,-1],66,67],0,[-1,-2,[],[]],0,0,[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,40,[]],0,0,0,[[75,-1,[23,[-2]]],75,76,76],[[75,-1],75,76],[[75,-1],75,[[24,[77]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[75,[[39,[78,69]]]],[[],79],0,[80,[[39,[81,69]]]],0,[18,18],[[-1,-2],12,[],[]],[80,[[23,[82]]]],[[80,-1],[[39,[82,69]]],[83,84]],0,[[],18],[[18,-1],75,67],[80,[[39,[80,69]]]],[80,[[39,[80,69]]]],[[18,78],[[39,[80,69]]]],[80,85],[80,85],0,[[80,16],[[39,[12,71]]]],[[18,16],[[39,[12,71]]]],[[75,16],[[39,[12,71]]]],[[75,-1],75,[86,84]],[-1,-1,[]],[[[87,[-1]]],80,[[24,[88]]]],[-1,-1,[]],[-1,-1,[]],0,[[18,-1],75,67],[[18,-1],75,67],[[75,-1,-2],75,[],[]],[80,89],[[75,89],75],[80,89],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[80,[[39,[-1,69]]],90],[[75,-1],75,[86,84]],[[],18],[[18,-1],75,67],[[18,-1],75,67],[[18,-1],75,67],[[75,-1],75,[86,84]],[[80,[92,[91]]],[[39,[93,94]]]],[80,[[23,[95]]]],[[18,74,-1],75,67],[75,[[39,[80,69]]]],[80,96],0,[80,[[39,[35,69]]]],[[80,4],[[39,[35,69]]]],[[75,97],75],[-1,-2,[],[]],0,0,[75,[[23,[75]]]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,40,[]],[-1,40,[]],[-1,40,[]],[80,98],[80,99],[[75,99],75],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[27,27],[[-1,-2],12,[],[]],0,[[27,4],100],0,[[27,16],[[39,[12,71]]]],[-1,-1,[]],0,[[27,4],100],[[27,4],100],[-1,-2,[],[]],[[],27],[[27,4],100],[[27,4],100],[[27,4],100],[[27,4,4],100],[[27,4,98],100],0,[-1,-2,[],[]],0,0,[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,40,[]]],"c":[],"p":[[17,"InternalClient"],[17,"RB"],[10,"Client",0],[1,"str"],[5,"Bus",0],[5,"Crowd",0],[5,"Taxi",0],[5,"Traffic",0],[5,"Train",0],[5,"Geo",0],[5,"Facility",0],[1,"tuple"],[6,"Ordering",494],[1,"bool"],[6,"LTAError",0],[5,"Formatter",495],[8,"Result",495],[5,"ReqwestBlocking",385],[5,"LTAClient",284],[1,"u32"],[5,"BusArrivalResp",496],[8,"LTAResult",0],[6,"Option",497],[10,"Into",498],[5,"ReqwestAsync",350],[5,"LTAClient",213],[5,"Agent",465],[1,"f64"],[5,"BikeParking",499],[5,"Vec",500],[6,"MrtLine",501],[5,"CrowdDensityForecast",502],[5,"StationCrowdLevel",502],[6,"StationCode",503],[5,"String",504],[6,"GeospatialLayerId",505],[6,"VolType",506],[5,"Date",507],[6,"Result",508],[5,"TypeId",509],[10,"ClientExt",195],[17,"Output"],[10,"FnOnce",510],[5,"BusRoute",511],[5,"BusService",512],[5,"BusStop",513],[10,"Clone",514],[10,"Debug",495],[5,"Coordinates",515],[5,"TaxiStand",516],[5,"CarPark",517],[5,"ErpRate",518],[5,"EstTravelTime",519],[5,"FaultyTrafficLight",520],[6,"RoadDetailsType",521],[5,"RoadDetails",521],[5,"TrafficImage",522],[5,"TrafficIncident",523],[10,"Send",524],[5,"TrafficSpeedBand",525],[5,"Vms",526],[5,"TrainServiceAlert",501],[10,"ClientExt",266],[5,"ClientBuilder",527],[5,"Request",528],[5,"RequestBuilder",528],[10,"IntoUrl",529],[5,"Response",530],[5,"Error",531],[10,"Future",532],[5,"Error",495],[5,"Context",533],[6,"Poll",534],[5,"Method",535],[5,"RequestBuilder",385],[10,"Display",495],[5,"Body",536],[5,"Request",537],[5,"ClientBuilder",538],[5,"Response",385],[5,"Bytes",539],[1,"u64"],[10,"Write",540],[10,"Sized",524],[5,"Extensions",541],[10,"Serialize",542],[5,"Response",543],[5,"Body",544],[5,"HeaderMap",545],[10,"DeserializeOwned",546],[1,"u8"],[1,"slice"],[1,"usize"],[5,"Error",547],[6,"SocketAddr",548],[5,"StatusCode",549],[5,"Duration",550],[5,"Url",551],[5,"Version",552],[5,"Request",553],[10,"BusRequests",208],[10,"CrowdRequests",234],[10,"FacilityRequests",238],[10,"GeoRequests",240],[10,"TaxiRequests",249],[10,"TrafficRequests",252],[10,"TrainRequests",264],[10,"BusRequests",279],[10,"CrowdRequests",311],[10,"FacilityRequests",315],[10,"GeoRequests",317],[10,"TaxiRequests",326],[10,"TrafficRequests",329],[10,"TrainRequests",341]],"b":[[100,"impl-Display-for-LTAError"],[101,"impl-Debug-for-LTAError"],[117,"impl-BusRequests%3CLTAClient%3CClient%3E%3E-for-Bus"],[118,"impl-BusRequests%3CLTAClient%3CClient%3E%3E-for-Bus"],[119,"impl-BusRequests%3CLTAClient%3CAgent%3E%3E-for-Bus"],[120,"impl-TrafficRequests%3CLTAClient%3CClient%3E%3E-for-Traffic"],[121,"impl-TrafficRequests%3CLTAClient%3CClient%3E%3E-for-Traffic"],[122,"impl-TrafficRequests%3CLTAClient%3CAgent%3E%3E-for-Traffic"],[123,"impl-CrowdRequests%3CLTAClient%3CAgent%3E%3E-for-Crowd"],[124,"impl-CrowdRequests%3CLTAClient%3CClient%3E%3E-for-Crowd"],[125,"impl-CrowdRequests%3CLTAClient%3CClient%3E%3E-for-Crowd"],[126,"impl-CrowdRequests%3CLTAClient%3CAgent%3E%3E-for-Crowd"],[127,"impl-CrowdRequests%3CLTAClient%3CClient%3E%3E-for-Crowd"],[128,"impl-CrowdRequests%3CLTAClient%3CClient%3E%3E-for-Crowd"],[129,"impl-FacilityRequests%3CLTAClient%3CAgent%3E%3E-for-Facility"],[130,"impl-FacilityRequests%3CLTAClient%3CClient%3E%3E-for-Facility"],[131,"impl-FacilityRequests%3CLTAClient%3CClient%3E%3E-for-Facility"],[132,"impl-GeoRequests%3CLTAClient%3CClient%3E%3E-for-Geo"],[133,"impl-GeoRequests%3CLTAClient%3CAgent%3E%3E-for-Geo"],[134,"impl-GeoRequests%3CLTAClient%3CClient%3E%3E-for-Geo"],[135,"impl-CrowdRequests%3CLTAClient%3CClient%3E%3E-for-Crowd"],[136,"impl-CrowdRequests%3CLTAClient%3CClient%3E%3E-for-Crowd"],[137,"impl-CrowdRequests%3CLTAClient%3CAgent%3E%3E-for-Crowd"],[286,"impl-Client-for-LTAClient%3CClient%3E"],[287,"impl-Client-for-LTAClient%3CAgent%3E"],[291,"impl-ClientExt-for-LTAClient%3CAgent%3E"],[292,"impl-ClientExt-for-LTAClient%3CClient%3E"],[293,"impl-ClientExt-for-LTAClient%3CAgent%3E"],[294,"impl-ClientExt-for-LTAClient%3CClient%3E"],[301,"impl-Client-for-LTAClient%3CClient%3E"],[302,"impl-Client-for-LTAClient%3CAgent%3E"],[303,"impl-Client-for-LTAClient%3CAgent%3E"],[304,"impl-Client-for-LTAClient%3CClient%3E"],[309,"impl-Client-for-LTAClient%3CAgent%3E"],[310,"impl-Client-for-LTAClient%3CClient%3E"],[355,"impl-Service%3CRequest%3E-for-%26Client"],[356,"impl-Service%3CRequest%3E-for-Client"],[373,"impl-Service%3CRequest%3E-for-Client"],[374,"impl-Service%3CRequest%3E-for-%26Client"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
